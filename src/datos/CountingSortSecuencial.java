package datos;

public class CountingSortSecuencial {
	
	public static int [] countingSortSecuencial (int array []) {
		
		//DEFINIMOS EL TAMAÑO DEL ARRAY PASADO POR PARAMETRO.
		int tamañoArray = array.length;
		
		//BUSCAMOS EL MAXIMO VALOR DE NUESTRO ARRAY. ESTO LO HACEMOS PARA DETERMINAR CUAL SERA 
    	//EL TAMAÑO DE NUESTRO ARRAY DE CONTEO.
    	int maximoValor = 0;
    	
    	for (int i = 0; i < array.length; i++) {
    		maximoValor = Math.max(maximoValor, array[i]);
  		}
    	
    	//ES SUMAMENTE IMPORTANTE ACORDARSE DE INCREMENTAR EL VALOR MAXIMO (TAMAÑO DE LOS COUNT ARRAY) EN 1. RECORDEMOS 
    	//QUE EL COUNT ARRAY DEBE IR DESDE 0 HASTA EL NUMERO MAXIMO INCLUIDO, ES DECIR, SI NOSOTROS TENEMOS UN ARRAY QUE 
    	//ES DEL TAMAÑO DE NUESTRO NUMERO MAXIMO, Y NUESTRO NUMERO MAXIMO ES EL 50 (POR EJEMPO) EL ARRAY VA A IR DESDE EL O 
    	//HASTA EL 49, ES DECIR 0 - 49. POR ESTA RAZON, EL NUMERO MAXIMO SE DEBE INCREMENTAR EN 1, YA QUE SI O SI EL NUMERO 
    	//MAXMO DEBE ESTAR DISPONIBLE COMO POSICION, PARA PODER ALLI, CONTAR SU FRECUENCIA. POR ENDE, SI INCREMENTAMOS EN 1
    	//EL VALOR MAXIMO, SIGUIENDO EL EJEMPLO, NUESTRO ARRAY SERIA DE 51 POSICIONES, ES DECIR, 0 - 50, INCLUYENDO EL VALOR 
    	//MAXIMO PARA PODER CONTAR SU FRECUENCIA EN DICHA POSICION.
    	    	
		
		//CREACION DEL ARRAY DE CONTEO. ACORDARSE DE INCREMENTAR EL MAXIMO VALOR EN 1
    	//CON EL OBJETIVO DE QUE CONTEMPLE TODAS LAS POSICIONES DESDE 0 HASTA EL MAXIMO 
    	//INCLUSIVE.
		int[] countArray = new int[maximoValor + 1];
		
		//ALMACENAMOS LA CANTIDAD DE APARICIONES DE CADA UNO DE LOS NUMEROS. PARA ENTENDER ESTE PASO,
		//ES CLAVE INTERPRETAR QUE CADA UNA DE LAS POSICIONES DE NUESTRO ARRAY DE CONTEO SERIAN NUESTROS 
		//NUMEROS Y EL VALOR DE DICHA POSICION LA CANTIDAD DE APARICIONES DE ESE NUMERO EN EL ARRAY QUE 
		//PASAMOS POR PARAMETRO. POR ESTA RAZON SE HACE countArray [arrayOriginal [i]] ++;
		for (int i = 0; i < tamañoArray; i++) {
		    countArray[array[i]]++;
		}
		 
		//UNA VEZ QUE ACUMULAMOS LAS APARICIONES EN EL COUNT ARRAY...
		
		//ORDENAMIENTO FINAL!!!
		
		//CREAMOS UN ARRAY DONDE VAMOS A GUARDAR EL ORDENAMIENTO FINAL.
        int[] arrayOrdenado = new int[array.length];
        
        //CREAMOS UN INDEX QUE NOS VA A AYUDAR PARA IR MOVIENDONOS DENTRO DE NUESTRO ARRRAY ORDENADO.
        int index = 0;
        
        //ESTE ULTIMO PASO, ES UN POCO DISTINTO AL ULTIMO PASO DE CUALQUIER COUNTING SORT QUE BUSQUEN EN GOOGLE. LA REALIDAD ES 
        //QUE ES MAS SENCILLO DE ENTENDER, POR ESO LO IMPLEMEMENTÉ. EL FUNCIONAMIENTO ES EL SIGUIENTE: EN PRIMER LUGAR DEBEMOS TENER
        //EN CUENTA QUE CADA UNA DE LAS POSICIONES REPRESENTAN CADA UNO DE LOS NUMEROS DEL ARRAY PASADO POR PARAMETRO Y SU VALOR, LA
        //CANTIDAD DE APARICIONES DE LOS MISMOS. DICHO ESTO, NOS PARAMOS EN NUESTRO COUNT ARRAY EN LA POSICION DONDE NOS DICE EL
        //NUMERO. SUPONGAMOS QUE ES LA POSICION 1. PRIMERO PREGUNTAMOS SI LA CANTIDAD DE APARICIONES DE LA POSICION EN LA QUE NOS 
        //ENCONTRAMOS ES MAYOR A 0. SI ES MAYOR A 0, QUIERE DECIR QUE EL NUMERO/POSICION ESTABA PRESENTE EN NUESTRO ARRAY QUE PASAMOS 
        //POR PARAMETRO, POR ENDE, DEBEMOS GUARDARLO EN NUESTRO ARRAY ORDENADO. VAMOS A NUESTRO ARRAY ORDENADO Y EN LA  POSICION DONDE 
        //NOS DICE EL INDEX, GUARDAMOS AL NUMERO. LUEGO AUMENTAMOS EL INDEX, PARA PASAR A LA SIGUIENTE POSICION DEL ARAY ORDENADO Y  
        //DISMINUIMOS LA CANTIDAD DE APARICIONES DEL COUNT ARRAY EN LA POSICION EN LA QUE ESTEMOS (YA QUE GUARDAMOS AL NUMERO DENTRO 
        //DE  NUESTRO ARRAY ORDENADO) Y VOLVEMOS A PREGUNTAR SI LA FRECUENCIA ES MAYOR A 0. SI ES MAYOR A 0, ESO QUIERE DECIR QUE EL 
        //NUMERO APARECIÓ 2 VECES O MAS, POR ENDE, LO VOLVEMOS A GUARDAR DENTRO DEL ARRAY ORDENADO PERO ESTA VEZ, EN LA POSICION 
        //SIGUIENTE. EN EL CASO DE QUE NO HAYA APARECIDO MAS DE UNA VEZ, EL NUMERO CAMBIA Y VAMOS A NUESTRO COUNT ARRAY A EVALUAR LA 
        //CANTIDAD DE APARICIONES DEL SIGUIENTE NUMERO/POSICION. ESTO SE REPITE HASTA LLEGAR AL NUMERO/POSICION FINAL DEL COUNT ARRAY.
        for (int numero = 0; numero <= maximoValor; numero++) {
            
        	while (countArray[numero] > 0) {
               
        		arrayOrdenado[index] = numero; //GUARDAMOS AL NUMERO EN EL ARRAY ORDENADO.
                
        		index ++; //INCREMENTAMOS EL INDEX (NOS MOVEMOS A LA POS SIGUIENTE DEL ARRAY ORDENADO).
                
        		countArray[numero]--; //DECREMENTAMOS LA CANTIDAD DE APARICIONES DEL NUMERO ENCONTRADO.
            }
        }
       
        return arrayOrdenado; //RETORNAMOS EL ARRAY FINALMENTE ORDENADO.
	}
}
